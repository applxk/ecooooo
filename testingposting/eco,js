// eco.js

const express = require('express');
const router = express.Router();
const { ProductDetail } = require('../models'); // Adjust this import based on your project structure
const { Op } = require('sequelize');
const yup = require('yup');

// Validation schema using yup
const validationSchema = yup.object({
  prodimg: yup.string().trim().url().required(),
  prodName: yup.string().trim().min(3).max(100).required(),
  leaves: yup.number().min(0).required(),
  stock: yup.number().min(0).required(),
  sku: yup.string().trim().min(3).max(50).required()
});

// POST route to create a new product detail
router.post('/product-detail', async (req, res) => {
  try {
    const data = await validationSchema.validate(req.body, { abortEarly: false });
    const newProduct = await ProductDetail.create(data);
    res.status(201).json(newProduct); // Respond with the newly created product detail
  } catch (error) {
    res.status(400).json({ message: 'Error adding product', error: error.message });
  }
});

// GET route to fetch all product details
router.get('/product-detail', async (req, res) => {
  let condition = {};
  let search = req.query.search;
  if (search) {
    condition[Op.or] = [
      { prodName: { [Op.like]: `%${search}%` } },
      { sku: { [Op.like]: `%${search}%` } }
    ];
  }

  try {
    const productList = await ProductDetail.findAll({
      where: condition,
      order: [['createdAt', 'DESC']]
    });
    res.json(productList);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching product list', error: error.message });
  }
});

// GET route to fetch a single product detail by id
router.get('/product-detail/:id', async (req, res) => {
  const id = req.params.id;
  try {
    const productDetail = await ProductDetail.findByPk(id);
    if (!productDetail) {
      res.sendStatus(404);
      return;
    }
    res.json(productDetail);
  } catch (error) {
    res.status(500).json({ message: `Error fetching product with id ${id}`, error: error.message });
  }
});

// PUT route to update a product detail by id
router.put('/product-detail/:id', async (req, res) => {
  const id = req.params.id;
  try {
    let productDetail = await ProductDetail.findByPk(id);
    if (!productDetail) {
      res.sendStatus(404);
      return;
    }

    const data = await validationSchema.validate(req.body, { abortEarly: false });
    const updatedProduct = await ProductDetail.update(data, { where: { id: id } });
    res.json({ message: 'Product detail updated successfully', product: updatedProduct });
  } catch (error) {
    res.status(400).json({ message: `Error updating product with id ${id}`, error: error.message });
  }
});

// DELETE route to delete a product detail by id
router.delete('/product-detail/:id', async (req, res) => {
  const id = req.params.id;
  try {
    const num = await ProductDetail.destroy({ where: { id: id } });
    if (num === 1) {
      res.json({ message: 'Product detail deleted successfully' });
    } else {
      res.status(400).json({ message: `Cannot delete product detail with id ${id}` });
    }
  } catch (error) {
    res.status(500).json({ message: `Error deleting product with id ${id}`, error: error.message });
  }
});

module.exports = router;
